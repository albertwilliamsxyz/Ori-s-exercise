// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BinaryOperationRequest struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BinaryOperationRequest) Reset()         { *m = BinaryOperationRequest{} }
func (m *BinaryOperationRequest) String() string { return proto.CompactTextString(m) }
func (*BinaryOperationRequest) ProtoMessage()    {}
func (*BinaryOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *BinaryOperationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryOperationRequest.Unmarshal(m, b)
}
func (m *BinaryOperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryOperationRequest.Marshal(b, m, deterministic)
}
func (m *BinaryOperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryOperationRequest.Merge(m, src)
}
func (m *BinaryOperationRequest) XXX_Size() int {
	return xxx_messageInfo_BinaryOperationRequest.Size(m)
}
func (m *BinaryOperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryOperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryOperationRequest proto.InternalMessageInfo

func (m *BinaryOperationRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *BinaryOperationRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type BinaryOperationResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BinaryOperationResponse) Reset()         { *m = BinaryOperationResponse{} }
func (m *BinaryOperationResponse) String() string { return proto.CompactTextString(m) }
func (*BinaryOperationResponse) ProtoMessage()    {}
func (*BinaryOperationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

func (m *BinaryOperationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryOperationResponse.Unmarshal(m, b)
}
func (m *BinaryOperationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryOperationResponse.Marshal(b, m, deterministic)
}
func (m *BinaryOperationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryOperationResponse.Merge(m, src)
}
func (m *BinaryOperationResponse) XXX_Size() int {
	return xxx_messageInfo_BinaryOperationResponse.Size(m)
}
func (m *BinaryOperationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryOperationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryOperationResponse proto.InternalMessageInfo

func (m *BinaryOperationResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*BinaryOperationRequest)(nil), "api.BinaryOperationRequest")
	proto.RegisterType((*BinaryOperationResponse)(nil), "api.BinaryOperationResponse")
}

func init() {
	proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784)
}

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xbb, 0x4a, 0xc5, 0x40,
	0x10, 0x86, 0xd9, 0x73, 0x30, 0xe8, 0xa0, 0xcd, 0x16, 0xc7, 0xa0, 0x16, 0x92, 0xca, 0x2a, 0xe2,
	0xe5, 0x01, 0xbc, 0xc5, 0x4e, 0x84, 0xc4, 0x17, 0x98, 0xdd, 0x0c, 0x38, 0xb0, 0xec, 0xae, 0x7b,
	0x09, 0xe6, 0xad, 0x7c, 0x44, 0x89, 0xa6, 0x3b, 0xe9, 0x52, 0x7e, 0x0c, 0xff, 0x37, 0x3f, 0xfc,
	0x70, 0x82, 0x9e, 0xaf, 0xd1, 0x73, 0xed, 0x83, 0x4b, 0x4e, 0x6e, 0xd1, 0x73, 0x75, 0x0f, 0xbb,
	0x27, 0xb6, 0x18, 0xc6, 0x77, 0x4f, 0x01, 0x13, 0x3b, 0xdb, 0xd2, 0x57, 0xa6, 0x98, 0xe4, 0x31,
	0x08, 0x2c, 0xc5, 0xa5, 0xb8, 0x3a, 0x68, 0x05, 0x4e, 0xa4, 0xca, 0xcd, 0x3f, 0xa9, 0xea, 0x06,
	0x4e, 0xf7, 0x52, 0xd1, 0x3b, 0x1b, 0x49, 0xee, 0xa0, 0x08, 0x14, 0xb3, 0x49, 0x73, 0x76, 0xa6,
	0xdb, 0x9f, 0x0d, 0x94, 0x1f, 0xa4, 0x3f, 0x2d, 0x6b, 0x34, 0xcd, 0x37, 0x05, 0xcd, 0x91, 0x3a,
	0x0a, 0x03, 0x6b, 0x92, 0x0f, 0xb0, 0x7d, 0xec, 0x7b, 0x79, 0x5e, 0x4f, 0xed, 0x96, 0xfb, 0x9c,
	0x5d, 0x2c, 0x1f, 0xe7, 0xb7, 0xaf, 0x70, 0xd4, 0x65, 0x15, 0x53, 0x40, 0x9d, 0xd6, 0x78, 0x1a,
	0x38, 0x7c, 0xcb, 0x26, 0xb1, 0x37, 0xe3, 0x1a, 0xcd, 0x33, 0x14, 0x2f, 0x3c, 0x70, 0x4f, 0x2b,
	0x24, 0xaa, 0xf8, 0xdb, 0xe9, 0xee, 0x37, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x03, 0x69, 0x95, 0xb8,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TechnicalExerciseServiceClient is the client API for TechnicalExerciseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TechnicalExerciseServiceClient interface {
	Add(ctx context.Context, in *BinaryOperationRequest, opts ...grpc.CallOption) (*BinaryOperationResponse, error)
	Substract(ctx context.Context, in *BinaryOperationRequest, opts ...grpc.CallOption) (*BinaryOperationResponse, error)
	Multiply(ctx context.Context, in *BinaryOperationRequest, opts ...grpc.CallOption) (*BinaryOperationResponse, error)
	Divide(ctx context.Context, in *BinaryOperationRequest, opts ...grpc.CallOption) (*BinaryOperationResponse, error)
}

type technicalExerciseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTechnicalExerciseServiceClient(cc grpc.ClientConnInterface) TechnicalExerciseServiceClient {
	return &technicalExerciseServiceClient{cc}
}

func (c *technicalExerciseServiceClient) Add(ctx context.Context, in *BinaryOperationRequest, opts ...grpc.CallOption) (*BinaryOperationResponse, error) {
	out := new(BinaryOperationResponse)
	err := c.cc.Invoke(ctx, "/api.TechnicalExerciseService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technicalExerciseServiceClient) Substract(ctx context.Context, in *BinaryOperationRequest, opts ...grpc.CallOption) (*BinaryOperationResponse, error) {
	out := new(BinaryOperationResponse)
	err := c.cc.Invoke(ctx, "/api.TechnicalExerciseService/Substract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technicalExerciseServiceClient) Multiply(ctx context.Context, in *BinaryOperationRequest, opts ...grpc.CallOption) (*BinaryOperationResponse, error) {
	out := new(BinaryOperationResponse)
	err := c.cc.Invoke(ctx, "/api.TechnicalExerciseService/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technicalExerciseServiceClient) Divide(ctx context.Context, in *BinaryOperationRequest, opts ...grpc.CallOption) (*BinaryOperationResponse, error) {
	out := new(BinaryOperationResponse)
	err := c.cc.Invoke(ctx, "/api.TechnicalExerciseService/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TechnicalExerciseServiceServer is the server API for TechnicalExerciseService service.
type TechnicalExerciseServiceServer interface {
	Add(context.Context, *BinaryOperationRequest) (*BinaryOperationResponse, error)
	Substract(context.Context, *BinaryOperationRequest) (*BinaryOperationResponse, error)
	Multiply(context.Context, *BinaryOperationRequest) (*BinaryOperationResponse, error)
	Divide(context.Context, *BinaryOperationRequest) (*BinaryOperationResponse, error)
}

// UnimplementedTechnicalExerciseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTechnicalExerciseServiceServer struct {
}

func (*UnimplementedTechnicalExerciseServiceServer) Add(ctx context.Context, req *BinaryOperationRequest) (*BinaryOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedTechnicalExerciseServiceServer) Substract(ctx context.Context, req *BinaryOperationRequest) (*BinaryOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Substract not implemented")
}
func (*UnimplementedTechnicalExerciseServiceServer) Multiply(ctx context.Context, req *BinaryOperationRequest) (*BinaryOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (*UnimplementedTechnicalExerciseServiceServer) Divide(ctx context.Context, req *BinaryOperationRequest) (*BinaryOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}

func RegisterTechnicalExerciseServiceServer(s *grpc.Server, srv TechnicalExerciseServiceServer) {
	s.RegisterService(&_TechnicalExerciseService_serviceDesc, srv)
}

func _TechnicalExerciseService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicalExerciseServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TechnicalExerciseService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicalExerciseServiceServer).Add(ctx, req.(*BinaryOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechnicalExerciseService_Substract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicalExerciseServiceServer).Substract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TechnicalExerciseService/Substract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicalExerciseServiceServer).Substract(ctx, req.(*BinaryOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechnicalExerciseService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicalExerciseServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TechnicalExerciseService/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicalExerciseServiceServer).Multiply(ctx, req.(*BinaryOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechnicalExerciseService_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnicalExerciseServiceServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TechnicalExerciseService/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnicalExerciseServiceServer).Divide(ctx, req.(*BinaryOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TechnicalExerciseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TechnicalExerciseService",
	HandlerType: (*TechnicalExerciseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TechnicalExerciseService_Add_Handler,
		},
		{
			MethodName: "Substract",
			Handler:    _TechnicalExerciseService_Substract_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _TechnicalExerciseService_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _TechnicalExerciseService_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
